plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
//    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'application'
}

group = 'org.vimalkeshu'
version = '1.0-SNAPSHOT'
description = 'copy data from one storage to another in distributed manner.'

java {
    sourceCompatibility = '8'
}

repositories {
    mavenCentral()
}

ext.versions =  [
        grpc :'1.68.0',
        protobufJava: '4.28.2',
        junitBom: '5.10.0',
        log4j: '2.20.0',
        guava: '31.0.1-jre',
        lombok: '1.18.30'
]

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    configureEach {
//        exclude()
    }
}

dependencies {
    implementation(group: 'io.grpc', name:'grpc-netty-shaded', version: versions.grpc)
    implementation(group: 'io.grpc', name:'grpc-protobuf', version: versions.grpc)
    implementation(group: 'io.grpc', name:'grpc-stub', version: versions.grpc)

    // For protobuf serialization
    implementation(group: 'com.google.protobuf', name:'protobuf-java', version: versions.protobufJava)

    // Logging
    implementation(group:'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j)
    implementation(group:'org.apache.logging.log4j', name: 'log4j-core', version: versions.log4j)

    compileOnly(group: 'org.projectlombok', name: 'lombok', version: versions.lombok)
    annotationProcessor(group: 'org.projectlombok', name: 'lombok', version: versions.lombok)

    testImplementation platform(group:'org.junit', name:'junit-bom', version: versions.junitBom)
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.named('test') {
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }

    useJUnitPlatform()
}

// Register a task "unitTest" that executes only the unit tests:
tasks.register("unitTest", Test) {
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }

    filter {
        excludeTestsMatching "*IntegrationTest"
    }

    useJUnitPlatform()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${versions.protobufJava}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${versions.grpc}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
            task.plugins {
                grpc {}
            }
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto/messages'
            srcDir 'src/main/proto/services'
        }
        java {
            srcDirs 'build/generated/source/proto/main/java',
                    'build/generated/source/proto/main/grpc'
        }
    }
}

application {
    // Define the main class for running the server or client
    // We'll specify different main classes when running
}

task runMain(type: JavaExec) {
    main = 'org.vimalkeshu.replication.master.MasterMain'
    classpath = sourceSets.main.runtimeClasspath
}

task runWorker(type: JavaExec) {
    main = 'org.vimalkeshu.replication.worker.WorkerMain'
    classpath = sourceSets.main.runtimeClasspath
}

task runDummy(type: JavaExec) {
    main = 'org.vimalkeshu.replication.dummy.DummyMain'
    classpath = sourceSets.main.runtimeClasspath
}